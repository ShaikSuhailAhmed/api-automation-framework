name: API Automation CI

# needed so gh-pages deploy can push
permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need to fetch gh-pages later

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Show Java & Maven versions
        run: |
          java -version
          mvn -v

      # ---- RUN TESTS (keep pipeline green even if tests fail) ----
      - name: Run Tests
        run: mvn -B clean test || true

      # ---- RESTORE HISTORY from previous report in gh-pages ----
      # Copies gh-pages:/history -> target/allure-results/history
      - name: Restore Allure history from gh-pages
        shell: bash
        run: |
          set -e
          # try to fetch gh-pages; ignore if it does not exist yet
          git fetch origin gh-pages:gh-pages || echo "gh-pages branch not found yet"
          if git rev-parse --verify gh-pages >/dev/null 2>&1; then
            echo "Restoring history from previous report..."
            git worktree add ghpages-dir gh-pages
            if [ -d "ghpages-dir/history" ]; then
              mkdir -p target/allure-results
              rm -rf target/allure-results/history
              cp -r ghpages-dir/history target/allure-results/history
              echo "History restored into target/allure-results/history"
            else
              echo "No history/ folder in previous report."
            fi
            git worktree remove ghpages-dir --force || true
          else
            echo "No gh-pages branch yet (first run)."
          fi

      # ---- GENERATE REPORT (now with history merged) ----
      - name: Generate Allure Report
        if: always()
        run: mvn -B allure:report

      # ---- UPLOAD ARTIFACTS ----
      - name: Upload Allure Results (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results
          if-no-files-found: warn

      - name: Upload Allure Report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/site/allure-maven-plugin
          if-no-files-found: warn

  deploy:
    if: always()
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: site

      # site/ contains index.html + history/ (merged). Publish it:
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

      # ---- NEW: Compute Pages URL and show it in Summary ----
      - name: Compute Pages URL
        id: pages
        shell: bash
        run: |
          url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "url=$url" >> "$GITHUB_OUTPUT"
          echo "Allure report should be live at: $url"

      - name: Add link to summary
        if: always()
        shell: bash
        run: |
          echo "### âœ… Allure report published" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "ðŸ”— **[Open report](${{ steps.pages.outputs.url }})**" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "> Branch: \`${{ github.ref_name }}\` â€¢ Commit: \`${{ github.sha }}\`" >> "$GITHUB_STEP_SUMMARY"

      # Optional: comment the link on PRs
      - name: Comment link on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.pages.outputs.url }}';
            const body = `âœ… Allure report is published: **${url}**`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
